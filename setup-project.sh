#!/bin/bash

echo "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node.js –ø—Ä–æ–µ–∫—Ç–∞ —Å TypeScript –∏ Express..."

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
echo "üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pnpm –ø—Ä–æ–µ–∫—Ç–∞..."
pnpm init

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Express..."
pnpm add express express-validator

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pnpm add -D typescript @types/express jest ts-jest @types/jest @types/node supertest @types/supertest eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser prettier eslint-config-prettier eslint-plugin-prettier nodemon

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TypeScript
echo "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TypeScript..."
pnpm tsc --init

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫..."
mkdir -p src

# –°–æ–∑–¥–∞–Ω–∏–µ index.ts
echo "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ index.ts..."
cat > src/index.ts << 'EOF'
import express from 'express';
import { setupApp } from './setup-app';

const app = express();
const PORT = process.env.PORT || 3000;

setupApp(app);

app.listen(PORT, () => {
  console.log(`üöÄ Server is running on port ${PORT}`);
});
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ setup-app.ts
echo "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ setup-app.ts..."
cat > src/setup-app.ts << 'EOF'
import express, { Application, Request, Response } from 'express';
import { body, validationResult } from 'express-validator';

export function setupApp(app: Application): void {
  app.use(express.json());
  app.use(express.urlencoded({ extended: true }));

  app.get('/', (req: Request, res: Response) => {
    res.json({ message: 'Hello World!' });
  });

  app.get('/health', (req: Request, res: Response) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
  });

  app.post('/users', [
    body('name').isLength({ min: 1 }).withMessage('Name is required'),
    body('email').isEmail().withMessage('Valid email is required'),
  ], (req: Request, res: Response) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    res.json({ message: 'User created', data: req.body });
  });
}
EOF

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è git
echo "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è git..."
git init

echo "‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!"
echo "üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: pnpm dev"
